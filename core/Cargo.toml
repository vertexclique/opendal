# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

[package]
categories = ["filesystem"]
description = "Apache OpenDALâ„¢: Access data freely, painlessly, and efficiently."
exclude = ["/tests/"]
keywords = ["storage", "fs", "s3", "azblob", "gcs"]
name = "opendal"

authors = ["Apache OpenDAL <dev@opendal.apache.org>"]
edition = "2021"
homepage = "https://opendal.apache.org/"
license = "Apache-2.0"
repository = "https://github.com/apache/opendal"
rust-version = "1.75"
version = "0.45.1"

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docs"]

[workspace]
default-members = ["."]
members = [".", "fuzz", "edge/*", "benches/vs_*"]

[features]
default = ["reqwest/rustls-tls", "services-memory"]

# Build test utils or not.
#
# These features are used to control whether to build opendal's test utils.
# And doesn't have any other effects.
#
# You should never enable this feature unless you are developing opendal.
tests = [
  "dep:rand",
  "dep:sha2",
  "dep:dotenvy",
  "layers-blocking",
  "services-azblob",
  "services-fs",
  "services-http",
  "services-memory",
  "services-s3",
]

# Enable path cache.
# This is an internal feature, and should not be used by users.
internal-path-cache = ["dep:moka"]
# Enable tokio runtime.
internal-tokio-rt = ["tokio/rt-multi-thread"]

# Enable layers chaos support
layers-chaos = ["dep:rand"]
# Enable layers metrics support
layers-metrics = ["dep:metrics"]
# Enable layers prometheus support, with tikv/prometheus-rs crate
layers-prometheus = ["dep:prometheus"]
# Enable layers prometheus support, with prometheus-client crate
layers-prometheus-client = ["dep:prometheus-client"]
# Enable layers madsim support
layers-madsim = ["dep:madsim"]
# Enable layers minitrace support.
layers-minitrace = ["dep:minitrace"]
# Enable layers tracing support.
layers-tracing = ["dep:tracing"]
# Enable layers oteltrace support.
layers-otel-trace = ["dep:opentelemetry"]
# Enable layers throttle support.
layers-throttle = ["dep:governor"]
# Enable layers await-tree support.
layers-await-tree = ["dep:await-tree"]
# Enable layers async-backtrace support.
layers-async-backtrace = ["dep:async-backtrace"]
# Enable dtrace support.
layers-blocking = ["internal-tokio-rt"]
layers-dtrace = ["dep:probe"]

services-alluxio = []
services-atomicserver = ["dep:atomic_lib"]
services-azblob = [
  "dep:sha2",
  "dep:reqsign",
  "reqsign?/services-azblob",
  "reqsign?/reqwest_request",
]
services-azdls = [
  "dep:reqsign",
  "reqsign?/services-azblob",
  "reqsign?/reqwest_request",
]
services-azfile = []
services-b2 = []
services-cacache = ["dep:cacache"]
services-chainsafe = []
services-cloudflare-kv = []
services-cos = [
  "dep:reqsign",
  "reqsign?/services-tencent",
  "reqsign?/reqwest_request",
]
services-d1 = []
services-dashmap = ["dep:dashmap"]
services-dbfs = []
services-dropbox = []
services-etcd = ["dep:etcd-client", "dep:bb8"]
services-foundationdb = ["dep:foundationdb"]
services-fs = ["tokio/fs"]
services-nfs = ["nuclei", "pin-project-lite", "futures-lite"]
services-ftp = ["dep:suppaftp", "dep:bb8", "dep:async-tls"]
services-gcs = [
  "dep:reqsign",
  "reqsign?/services-google",
  "reqsign?/reqwest_request",
]
services-gdrive = ["internal-path-cache"]
services-ghac = []
services-github = []
services-gridfs = ["dep:mongodb"]
services-hdfs = ["dep:hdrs"]
services-http = []
services-huggingface = []
services-icloud = ["internal-path-cache"]
services-ipfs = ["dep:prost"]
services-ipmfs = []
services-koofr = []
services-libsql = ["dep:hrana-client-proto"]
services-memcached = ["dep:bb8"]
services-memory = []
services-mini-moka = ["dep:mini-moka"]
services-moka = ["dep:moka"]
services-mongodb = ["dep:mongodb"]
services-mysql = ["dep:mysql_async"]
services-obs = [
  "dep:reqsign",
  "reqsign?/services-huaweicloud",
  "reqsign?/reqwest_request",
]
services-onedrive = []
services-oss = [
  "dep:reqsign",
  "reqsign?/services-aliyun",
  "reqsign?/reqwest_request",
]
services-pcloud = []
services-persy = ["dep:persy", "internal-tokio-rt"]
services-postgresql = ["dep:tokio-postgres", "dep:bb8", "dep:bb8-postgres"]
services-redb = ["dep:redb", "internal-tokio-rt"]
services-redis = ["dep:redis", "redis?/tokio-rustls-comp"]
services-redis-native-tls = ["services-redis", "redis?/tokio-native-tls-comp"]
services-rocksdb = ["dep:rocksdb", "internal-tokio-rt"]
services-s3 = [
  "dep:reqsign",
  "reqsign?/services-aws",
  "reqsign?/reqwest_request",
]
services-seafile = []
services-sftp = ["dep:openssh", "dep:openssh-sftp-client"]
services-sled = ["dep:sled", "internal-tokio-rt"]
services-sqlite = ["dep:rusqlite", "dep:r2d2", "internal-tokio-rt"]
services-supabase = []
services-swift = []
services-tikv = ["tikv-client"]
services-upyun = ["dep:hmac", "dep:sha1"]
services-vercel-artifacts = []
services-vercel-blob = []
services-hdfs-native = ["hdfs-native"]
services-wasabi = []
services-webdav = []
services-webhdfs = []
services-yandex-disk = []
services-surrealdb = ["dep:surrealdb"]

[lib]
bench = false

[[bench]]
harness = false
name = "ops"
required-features = ["tests"]

[[bench]]
harness = false
name = "oio"
required-features = ["tests"]

[[test]]
harness = false
name = "behavior"
path = "tests/behavior/main.rs"
required-features = ["tests"]

[dependencies]
async-tls = { version = "0.13.0", optional = true }

# Required dependencies
anyhow = { version = "1.0.30", features = ["std"] }
async-trait = "0.1.68"
backon = "0.4.3"
base64 = "0.21"
bytes = "1.4"
chrono = { version = "0.4.28", default-features = false, features = [
  "clock",
  "std",
] }
flagset = "0.4"
futures = { version = "0.3", default-features = false, features = ["std"] }
http = "0.2.9"
log = "0.4"
md-5 = "0.10"
# TODO: remove once_cell when lazy_lock is stable: https://doc.rust-lang.org/std/cell/struct.LazyCell.html
once_cell = "1"
percent-encoding = "2"
quick-xml = { version = "0.31", features = ["serialize", "overlapped-lists"] }
reqwest = { version = "0.11.18", features = [
  "stream",
], default-features = false }
serde = { version = "1", features = ["derive"] }
serde_json = "1"
tokio = { version = "1.27", features = ["sync", "io-util"] }
uuid = { version = "1", features = ["serde", "v4"] }

# Test only dependencies
dotenvy = { version = "0.15", optional = true }
rand = { version = "0.8", optional = true }

# Optional dependencies

# Services
# general dependencies.
bb8 = { version = "0.8", optional = true }
prost = { version = "0.11", optional = true }
r2d2 = { version = "0.8", optional = true }
sha1 = { version = "0.10.6", optional = true }
sha2 = { version = "0.10", optional = true }

# For http based services.
reqsign = { version = "0.14.9", default-features = false, optional = true }

# for services-atomic-server
atomic_lib = { version = "0.34.5", optional = true }
# for services-postgres
bb8-postgres = { version = "0.8.1", optional = true }
tokio-postgres = { version = "0.7.8", optional = true }
# for services-cacache
cacache = { version = "13.0", default-features = false, features = [
  "tokio-runtime",
  "mmap",
], optional = true }
# for services-dashmap
dashmap = { version = "5.4", optional = true }
# for services-etcd
etcd-client = { version = "0.12", optional = true, features = ["tls"] }
# for services-foundationdb
foundationdb = { version = "0.8.0", features = [
  "embedded-fdb-include",
], optional = true }
# for services-hdfs
hdrs = { version = "0.3.0", optional = true, features = ["async_file"] }
# for services-upyun
hmac = { version = "0.12.1", optional = true }
# for services-libsql
hrana-client-proto = { version = "0.2.1", optional = true }
# for services-mini-moka
mini-moka = { version = "0.10", optional = true }
# for services-moka
moka = { version = "0.12", optional = true, features = ["future", "sync"] }
# for services-mongodb
mongodb = { version = "2.8.1", optional = true, features = ["tokio-runtime"] }
# for services-mysql
mysql_async = { version = "0.32.2", default-features = false, features = [
  "default-rustls",
], optional = true }
# for services-nucleifs
nuclei = { version = "0.4", default-features = false, features = ["tokio", "iouring", "attributes"], optional = true }
pin-project-lite = { version = "0.2", optional = true }
futures-lite = { version = "2.2", optional = true }
# for services-sftp
openssh = { version = "0.10.0", optional = true }
openssh-sftp-client = { version = "0.14.0", optional = true, features = [
  "openssh",
  "tracing",
] }
# for services-persy
persy = { version = "1.4.6", optional = true }
# for services-redb
redb = { version = "1.1.0", optional = true }
# for services-redis
redis = { version = "0.23.1", features = [
  "cluster-async",
  "tokio-comp",
  "connection-manager",
], optional = true }
# for services-rocksdb
rocksdb = { version = "0.21.0", default-features = false, optional = true }
# for services-sqlite
rusqlite = { version = "0.29.0", optional = true, features = ["bundled"] }
# for services-sled
sled = { version = "0.34.7", optional = true }
# for services-ftp
suppaftp = { version = "5.3.1", default-features = false, features = [
  "async-secure",
  "rustls",
  "async-rustls",
], optional = true }
# for services-tikv
tikv-client = { version = "0.3.0", optional = true, default-features = false }
# for services-hdfs-native
hdfs-native = { version = "0.6.0", optional = true }
# for services-surrealdb
surrealdb = { version = "1.3.0", optional = true, features = ["protocol-http"] }

# Layers
# for layers-async-backtrace
async-backtrace = { version = "0.2.6", optional = true }
# for layers-await-tree
await-tree = { version = "0.1.1", optional = true }
# for layers-throttle
governor = { version = "0.6.0", optional = true, features = ["std"] }
# for layers-madsim
madsim = { version = "0.2.21", optional = true }
# for layers-metrics
metrics = { version = "0.20", optional = true }
# for layers-minitrace
minitrace = { version = "0.6", optional = true }
# for layers-opentelemetry
opentelemetry = { version = "0.21.0", optional = true }
# for layers-prometheus
prometheus = { version = "0.13", features = ["process"], optional = true }
# for layers-prometheus-client
prometheus-client = { version = "0.22.0", optional = true }
# for layers-tracing
tracing = { version = "0.1", optional = true }
# for layers-dtrace
probe = { version = "0.5.1", optional = true }

[target.'cfg(target_arch = "wasm32")'.dependencies]
getrandom = { version = "0.2", features = ["js"] }

[dev-dependencies]
criterion = { version = "0.5", features = ["async", "async_tokio"] }
dotenvy = "0.15"
libtest-mimic = "0.6"
minitrace = { version = "0.6", features = ["enable"] }
opentelemetry = { version = "0.21", default-features = false, features = [
  "trace",
] }
pretty_assertions = "1"
rand = "0.8"
sha2 = "0.10"
size = "0.4"
tokio = { version = "1.27", features = ["fs", "macros", "rt-multi-thread"] }
tracing-subscriber = { version = "0.3", features = [
  "env-filter",
  "tracing-log",
] }
wiremock = "0.5"
